name: Deploy to GCP Artifact Registry

on:
  push:
    branches: [ develop, staging, release/* ]
  pull_request:
    branches: [ main, master, develop, staging ]

env:
  REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: landing-fardust/public-docker

permissions:
  contents: read
  id-token: write

jobs:
  discover-dockerfiles:
    runs-on: ubuntu-latest
    outputs:
      dockerfiles: ${{ steps.get-dockerfiles.outputs.files }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get Dockerfiles
      id: get-dockerfiles
      run: |
        # Find all Dockerfiles in the images directory
        dockerfiles=$(find images -name "Dockerfile" -type f | jq -R -s -c 'split("\n")[:-1]')
        echo "files=$dockerfiles" >> $GITHUB_OUTPUT

  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
    - name: Determine version and tag
      id: version
      run: |
        # Get branch name
        branch_name=${GITHUB_REF#refs/heads/}
        
        # Generate Docker-specific versioning with timestamp
        timestamp=$(date +%Y%m%d-%H%M%S)
        short_sha=${GITHUB_SHA::8}
        
        # All branches in this workflow get branch-specific versioning
        version="0.0.0-${branch_name}.${timestamp}"
        tag="${branch_name}-${timestamp}"
        
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "tag=$tag" >> $GITHUB_OUTPUT

  build-images:
    needs: [discover-dockerfiles, determine-version]
    strategy:
      matrix:
        dockerfile: ${{ fromJSON(needs.discover-dockerfiles.outputs.dockerfiles) }}
    uses: ./.github/workflows/reusable-build.yml
    with:
      dockerfile: ${{ matrix.dockerfile }}
      version: ${{ needs.determine-version.outputs.version }}
      tag: ${{ needs.determine-version.outputs.tag }}
    secrets:
      WIF_PROVIDER: ${{ secrets.WIF_PROVIDER }}
      GCP_SA_EMAIL: ${{ secrets.GCP_SA_EMAIL }}

 