name: Semantic Release

on:
  push:
    branches: [ main, master ]

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  semantic-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.GCP_SA_EMAIL }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm ci

    - name: Semantic Release
      id: semantic
      uses: cycjimmy/semantic-release-action@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        semantic_version: 21
        branches: |
          [
            'main',
            'master'
          ]
        extra_plugins: |
          @semantic-release/changelog
          @semantic-release/git
          @semantic-release/github
        dry_run: false

    - name: Get release info
      id: release-info
      run: |
        if [ "${{ steps.semantic.outputs.new_release_published }}" = "true" ]; then
          echo "version=${{ steps.semantic.outputs.new_release_version }}" >> $GITHUB_OUTPUT
          echo "tag=${{ steps.semantic.outputs.new_release_tag }}" >> $GITHUB_OUTPUT
          echo "published=true" >> $GITHUB_OUTPUT
        else
          echo "published=false" >> $GITHUB_OUTPUT
        fi

  # Always build images on main branch
  discover-dockerfiles:
    needs: semantic-release
    runs-on: ubuntu-latest
    outputs:
      dockerfiles: ${{ steps.get-dockerfiles.outputs.files }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get Dockerfiles
      id: get-dockerfiles
      run: |
        # Find all Dockerfiles in the images directory
        dockerfiles=$(find images -name "Dockerfile" -type f | jq -R -s -c 'split("\n")[:-1]')
        echo "files=$dockerfiles" >> $GITHUB_OUTPUT

  determine-version:
    needs: semantic-release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm ci

    - name: Determine version and tag
      id: version
      run: |
        if [ "${{ needs.semantic-release.outputs.published }}" = "true" ]; then
          # Use semantic release version if a new release was published
          version="${{ needs.semantic-release.outputs.version }}"
          tag="${{ needs.semantic-release.outputs.tag }}"
        else
          # Use current package.json version with dev suffix for non-release builds
          current_version=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
          if [[ "$current_version" == *"-"* ]]; then
            # Already a development version
            version="$current_version"
          else
            # Add dev suffix
            version="${current_version}-dev"
          fi
          tag="main-$(date +%Y%m%d-%H%M%S)"
        fi
        
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "tag=$tag" >> $GITHUB_OUTPUT

  build-images:
    needs: [discover-dockerfiles, determine-version]
    strategy:
      matrix:
        dockerfile: ${{ fromJSON(needs.discover-dockerfiles.outputs.dockerfiles) }}
    uses: ./.github/workflows/reusable-build.yml
    with:
      dockerfile: ${{ matrix.dockerfile }}
      version: ${{ needs.determine-version.outputs.version }}
      tag: ${{ needs.determine-version.outputs.tag }}
    secrets:
      WIF_PROVIDER: ${{ secrets.WIF_PROVIDER }}
      GCP_SA_EMAIL: ${{ secrets.GCP_SA_EMAIL }} 